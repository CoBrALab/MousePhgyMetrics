#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([data_type],[Specify either respiration or plethysmography - will determine the processing workflow and metrics extracted],[])
# ARG_POSITIONAL_SINGLE([analysis_type],[Specify one of three options: wavelet_only, peak_detection_only, compute_metrics. See README for details.],[])
# ARG_POSITIONAL_SINGLE([input_trace],[The raw physiological recording, must be a 1D csv file.],[])
# ARG_POSITIONAL_SINGLE([tot_length_seconds],[The exact total duration of the provided physiological recording, in seconds.],[])
# ARG_OPTIONAL_SINGLE([output_path],[],[Prefix to the output csvs and image files. Must not already exist.],[./physiology_analysis_outputs])
# ARG_OPTIONAL_SINGLE([output_image_type],[],[Type of image to output, either svg (for publication-level quality) or png],[png])
# ARG_OPTIONAL_SINGLE([peak_detection_parameter_csv],[],[Parameters that determine the which peaks in the trace are counted as breaths/heart beats. Refer to the scipy.signal.find_peaks() documentation for the full list of parameters. See README for the default values for each data type.],[])
# ARG_OPTIONAL_SINGLE([window_length],[],[rolling window length (in seconds) over which to smooth respiration trace.],[2])
# ARG_OPTIONAL_SINGLE([fMRI_censoring_mask_csv],[],[If comparing to censored fMRI data, provide the 1D csv of boolean values for each fMRI timepoint, and the physiological outputs will be censored according to the same csv, so that high motion timepoints are excluded from the analysis.],[None])
# ARG_OPTIONAL_SINGLE([fMRI_TR],[],[If providing the fMRI_censoring_mask_csv, specify also the TR with which the fMRI data was acquired, in seconds.],[1.0])
# ARG_OPTIONAL_SINGLE([average_metrics_window_length],[],[If wish to compute the average of each metric in a time window, choose the window length (e.g 120s). Only executes when analysis_type=compute_metrics],[None])
# ARG_OPTIONAL_SINGLE([average_metrics_window_overlap],[],[If wish to compute the average of each metric in a rolling time window, choose the overlap between windows (e.g 60s). Only executes when analysis_type=compute_metrics],[None])
# ARG_HELP([This package analyzes raw mouse respiratory or plethysmography traces, extracts breaths and/or heart beats, and outputs a wide range of instantaneous (per sample or breath/heartbeat) or average metrics such as rate, period, HRV, entropy etcetera. The workflow enables the user to QC the detected peaks and tune the peak detection parameters if needed, thereby ensuring highly accurate metrics.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output_path="./physiology_analysis_outputs"
_arg_output_image_type="png"
_arg_peak_detection_parameter_csv=
_arg_window_length="2"
_arg_fmri_censoring_mask_csv="None"
_arg_fmri_tr="1.0"
_arg_average_metrics_window_length="None"
_arg_average_metrics_window_overlap="None"


print_help()
{
	printf '%s\n' "This package analyzes raw mouse respiratory or plethysmography traces, extracts breaths and/or heart beats, and outputs a wide range of instantaneous (per sample or breath/heartbeat) or average metrics such as rate, period, HRV, entropy etcetera. The workflow enables the user to QC the detected peaks and tune the peak detection parameters if needed, thereby ensuring highly accurate metrics."
	printf 'Usage: %s [--output_path <arg>] [--output_image_type <arg>] [--peak_detection_parameter_csv <arg>] [--window_length <arg>] [--fMRI_censoring_mask_csv <arg>] [--fMRI_TR <arg>] [--average_metrics_window_length <arg>] [--average_metrics_window_overlap <arg>] [-h|--help] <data_type> <analysis_type> <input_trace> <tot_length_seconds>\n' "$0"
	printf '\t%s\n' "<data_type>: Specify either respiration or plethysmography - will determine the processing workflow and metrics extracted"
	printf '\t%s\n' "<analysis_type>: Specify one of three options: wavelet_only, peak_detection_only, compute_metrics. See README for details."
	printf '\t%s\n' "<input_trace>: The raw physiological recording, must be a 1D csv file."
	printf '\t%s\n' "<tot_length_seconds>: The exact total duration of the provided physiological recording, in seconds."
	printf '\t%s\n' "--output_path: Prefix to the output csvs and image files. Must not already exist. (default: './physiology_analysis_outputs')"
	printf '\t%s\n' "--output_image_type: Type of image to output, either svg (for publication-level quality) or png (default: 'png')"
	printf '\t%s\n' "--peak_detection_parameter_csv: Parameters that determine the which peaks in the trace are counted as breaths/heart beats. Refer to the scipy.signal.find_peaks() documentation for the full list of parameters. See README for the default values for each data type. (no default)"
	printf '\t%s\n' "--window_length: rolling window length (in seconds) over which to smooth respiration trace. (default: '2')"
	printf '\t%s\n' "--fMRI_censoring_mask_csv: If comparing to censored fMRI data, provide the 1D csv of boolean values for each fMRI timepoint, and the physiological outputs will be censored according to the same csv, so that high motion timepoints are excluded from the analysis. (default: 'None')"
	printf '\t%s\n' "--fMRI_TR: If providing the fMRI_censoring_mask_csv, specify also the TR with which the fMRI data was acquired, in seconds. (default: '1.0')"
	printf '\t%s\n' "--average_metrics_window_length: If wish to compute the average of each metric in a time window, choose the window length (e.g 120s). Only executes when analysis_type=compute_metrics (default: 'None')"
	printf '\t%s\n' "--average_metrics_window_overlap: If wish to compute the average of each metric in a rolling time window, choose the overlap between windows (e.g 60s). Only executes when analysis_type=compute_metrics (default: 'None')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--output_path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output_path="$2"
				shift
				;;
			--output_path=*)
				_arg_output_path="${_key##--output_path=}"
				;;
			--output_image_type)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output_image_type="$2"
				shift
				;;
			--output_image_type=*)
				_arg_output_image_type="${_key##--output_image_type=}"
				;;
			--peak_detection_parameter_csv)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_peak_detection_parameter_csv="$2"
				shift
				;;
			--peak_detection_parameter_csv=*)
				_arg_peak_detection_parameter_csv="${_key##--peak_detection_parameter_csv=}"
				;;
			--window_length)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_window_length="$2"
				shift
				;;
			--window_length=*)
				_arg_window_length="${_key##--window_length=}"
				;;
			--fMRI_censoring_mask_csv)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fmri_censoring_mask_csv="$2"
				shift
				;;
			--fMRI_censoring_mask_csv=*)
				_arg_fmri_censoring_mask_csv="${_key##--fMRI_censoring_mask_csv=}"
				;;
			--fMRI_TR)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fmri_tr="$2"
				shift
				;;
			--fMRI_TR=*)
				_arg_fmri_tr="${_key##--fMRI_TR=}"
				;;
			--average_metrics_window_length)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_average_metrics_window_length="$2"
				shift
				;;
			--average_metrics_window_length=*)
				_arg_average_metrics_window_length="${_key##--average_metrics_window_length=}"
				;;
			--average_metrics_window_overlap)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_average_metrics_window_overlap="$2"
				shift
				;;
			--average_metrics_window_overlap=*)
				_arg_average_metrics_window_overlap="${_key##--average_metrics_window_overlap=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'data_type', 'analysis_type', 'input_trace' and 'tot_length_seconds'"
	test "${_positionals_count}" -ge 4 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 4 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 4 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 4 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_data_type _arg_analysis_type _arg_input_trace _arg_tot_length_seconds "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


echo "Value of --option: $_arg_option"
echo "print is $_arg_print"
echo "Value of positional-arg: $_arg_positional_arg"

# ] <-- needed because of Argbash